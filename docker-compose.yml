version: '3'

services:
  rabbitmq:
    image: "rabbitmq:management"
    container_name: rabbitmq
    ports:
      - "15672:15672"
    expose:
      - 5672

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api
    environment:
      - WDS_SOCKET_PORT=0

  api:
    build: ./backend/api
    container_name: api
    ports:
      - "8000:8000"
    volumes:
      - ./backend/api:/api/
    restart: always
    depends_on:
      - rabbitmq
      - user_service

  user_service:
    build: ./backend/user_service
    command: uvicorn src.main:app --reload --host 0.0.0.0 --port 8002
    volumes:
      - ./backend/user_service:/app/
    ports:
      - '8002:8002'
    depends_on:
      - user_db
      - rabbitmq

  user_db:
    image: postgres
    volumes:
      - postgres_data_user:/var/lib/postgresql/data/
    ports:
      - '5432:5432'
    restart: always
    env_file:
      - backend/user_service/.env

  room_service:
    build: ./backend/room_service
    command: uvicorn src.main:app --reload --host 0.0.0.0 --port 8003
    volumes:
      - ./backend/room_service:/app/
    ports:
      - '8003:8003'
    depends_on:
      - room_db
      - rabbitmq

  room_db:
    image: postgres
    volumes:
      - postgres_data_room:/var/lib/postgresql/data/
    ports:
      - '5433:5433'
    restart: always
    env_file:
      - backend/room_service/.env

  booking_service:
    build: ./backend/booking_service
    command: uvicorn src.main:app --reload --host 0.0.0.0 --port 8004
    volumes:
      - ./backend/booking_service:/app/
    ports:
      - '8004:8004'
    depends_on:
      - booking_db
      - rabbitmq

  booking_db:
    image: postgres
    volumes:
      - postgres_data_booking:/var/lib/postgresql/data/
    ports:
      - '5434:5434'
    restart: always
    env_file:
      - backend/booking_service/.env


volumes:
  postgres_data_user:
  postgres_data_room:
  postgres_data_booking:
